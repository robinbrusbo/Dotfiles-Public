# -*- coding: utf-8 -*-
# i3pystatus config file
#
# Optional dependencies for i3pystatus-git
#     python-netifaces: network 
#     python-colour: network 
#     python-basiciw: wireless network 
#     python-dbus: now-playing, thunderbird 
#     python-gobject: thunderbird 
#     python-gobject2: thunderbird
#     python-beautifulsoup4: parcel
#     python-cssselect: parcel,
#     python-lxml: parcel,
#     python-pywapi: weather
#     python-pyalsaaudio: ALSA 
#     python-psutil: memory 


# In i3 configs:
#
# # Start i3bar to display a workspace bar (plus the system information i3status
# # finds out, if available)
# bar
# {
#     font pango:Hack, FontAwesome 10
#     status_command python ~/.config/i3/i3pystatus.conf
#     tray_output primary
#     colors{
#         background #222222
#         separator  #ffffff
#         statusline #dcdcdc
#         # focused_workspace  #2aa198 #073642 #eee895
#         # active_workspace   #073642 #859900 #839496
#         # inactive_workspace #002b36 #002b36 #586e75
#         # urgent_workspace   #cb4b16 #dc322f #fdf6e3
#     }
# }

import subprocess
import os
import os.path

from i3pystatus import Status
from i3pystatus.updates import pacman, yay


status = Status()


status.register("text",
    text="",
    color="#222222")


status.register("updates",
    format = " : {count} ", # does not work?
    format_no_updates = "  ",
    on_leftclick="kitty --single-instance yay",
    on_middleclick="kitty --single-instance emacsclient -nw /var/log/pacman.log",
    on_rightclick="kitty --single-instance --hold inxi -Fxz",
    backends = [pacman.Pacman()])


# status.register("uptime",
#     format=" : {uptime:2} ",
#     color="#FFFFFF",
#     on_leftclick="kitty --hold inxi -Fxz",)


status.register("clock",
    format=" : %H:%M:%S ",
    color='#C678DD',
    on_leftclick="gsimplecal",)


status.register("clock",
    format=" : %a %d-%m-%Y ",
    color='#61AEEE',
    on_leftclick="gsimplecal",)


status.register("pulseaudio",
    color_unmuted='#98C379',
    color_muted='#E06C75',
    format_muted=' : [muted] ',
    on_leftclick="pavucontrol",
    format=" : {volume}% ")


#status.register("network",
#    interface="eno1",
#    color_up="#8AE234",
#    color_down="#EF2929",
#    format_up=": {v4cidr}",
#    format_down="",)


# status.register("network",
#     interface="wlo1",
#     color_up="#8AE234",
#     color_down="#EF2929",
#     format_up=' : {essid} ',
#     format_down="",)


# status.register("backlight",
#     format=" : {percentage:.0f}% ",
#     format_no_backlight=" : - ",
#     on_leftclick="brightnessctl s 50- intel_backlight",
#     on_rightclick="brightnessctl s +50 intel_backlight",
#     backlight="intel_backlight",)


status.register("battery",
    interval=5,
    format=" {status}{percentage:.0f}% ",
    not_present_text="",
    alert=True,
    alert_percentage=15,
    color="#FFFFFF",
    critical_color="#FF1919",
    charging_color="#E5E500",
    full_color="#D19A66",
    status={
        "DIS": " ",
        "CHR": " ",
        "FULL": " ",
},)

status.register("temp",
    format=" : {Package_id_0:.0f}°C ",
    lm_sensors_enabled=True,
    on_leftclick="kitty --single-instance glances -1",)


# status.register("load",
#     format=" : {avg1} ",
#     on_leftclick="kitty glances -1",)


status.register("cpu_usage",
   format=" : {usage}% ",
   on_leftclick="kitty --single-instance glances -1",)


status.register("mem",
    color="#999999",
    warn_color="#E5E500",
    alert_color="#FF1919",
    format=" : {used_mem}/{total_mem} GB ",
    # format=": {avail_mem} GB",
    on_leftclick="kitty --single-instance glances -1",
    divisor=1073741824,)


status.register("disk",
    color='#56B6C2',
    path="/home",
    on_leftclick="kitty --single-instance ranger",
    format=" : {free:.1f} GB Free ",)


# status.register('ping',
#    format_disabled='',
#    color='#61AEEE')


status.register("keyboard_locks",
    format=" {caps} {num} ",
    caps_on='Caps Lock',
    caps_off='',
    num_on='Num On',
    num_off='',
    color='#e60053',)


# status.register("mpd",
#     host='localhost',
#     port='6600',
#     format=" {status} ",
#     on_leftclick="switch_playpause",
#     on_rightclick=["mpd_command", "stop"],
#     on_middleclick=["mpd_command", "shuffle"],
#     on_upscroll=["mpd_command", "next_song"],
#     on_downscroll=["mpd_command", "previous_song"],
#     status={
#         "pause": " ",
#         "play": " ",
#         "stop": " ",
#     },)


status.run()
